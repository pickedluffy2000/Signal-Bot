import puppeteer from 'puppeteer-extra';
import stealthPlugin from 'puppeteer-extra-plugin-stealth';

// Carregando o plugin de stealth
puppeteer.use(stealthPlugin());

async function pegarSinais() {
    const browser = await puppeteer.launch({
        headless: false,
        executablePath: 'C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe',
        userDataDir: 'C:\\Usuários\\Desktop\\AppData\\Local\\Microsoft\\Edge\\User Data\\personal',
        args: ['--no-sandbox', '--disable-setuid-sandbox'],
    });

    const page = await browser.newPage();
    console.log('Iniciando navegador...');

    // Definindo o user agent
    const userAgent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36';
    await page.setUserAgent(userAgent);

    // Adicionando cabeçalhos HTTP
    await page.setExtraHTTPHeaders({
        'accept-language': 'en-US,en;q=0.9',
    });

    // Definindo as dimensões da janela
    await page.setViewport({
        width: 1280,
        height: 800,
    });

    try {
        await page.goto('https://brazino777.com/pt/game/34165', {
            waitUntil: 'networkidle2',
            timeout: 99000000 // Aumenta o tempo limite
        });

        console.log('Navegador iniciado e monitorando...');

        // Função para pegar sinais e prever o próximo sinal
        const pegarSinais = async () => {
            // Espera o seletor do jogo aparecer
            await page.waitForSelector('seletor_do_algoritmo_de_jogo');

            // Captura o valor do multiplicador no jogo
            const multiplicadores = await page.evaluate(() => {
                const elementos = document.querySelectorAll('seletor_do_algoritmo_de_jogo');
                return Array.from(elementos).map(el => parseFloat(el.textContent));
            });

            multiplicadores.forEach(multiplicador => {
                if (multiplicador >= 8) {
                    console.log('\x1b[32m%s\x1b[0m', `Sinal Verde: Multiplicador acima de 8x - ${multiplicador}`);
                }
            });

            // Previsão 1 minuto antes
            const previsao = preverSinalAcima8x(multiplicadores);
            if (previsao) {
                setTimeout(() => {
                    console.log('\x1b[33m%s\x1b[0m', `Alerta: Multiplicador maior que 8x previsto para o próximo minuto!`);
                }, 60000); // 1 minuto antes
            }
        };

        // Função para prever se o próximo multiplicador será maior que 8x
        const preverSinalAcima8x = (multiplicadores) => {
            // Lógica básica de previsão: por exemplo, detectar se o padrão atual sugere um multiplicador alto
            // Aqui, você pode implementar uma lógica de previsão mais complexa, baseada nos últimos multiplicadores observados
            const ultimoMultiplicador = multiplicadores[multiplicadores.length - 1];
            if (ultimoMultiplicador >= 8) {
                return true; // Previsão de que o próximo multiplicador será maior que 8x
            }
            return false;
        };

        // Monitorar os sinais continuamente
        setInterval(pegarSinais, 30000); // Verifica a cada 30 segundos

    } catch (error) {
        console.error('Erro ao acessar o site:', error);
    }
}

// Inicie a monitoração dos sinais
pegarSinais();
